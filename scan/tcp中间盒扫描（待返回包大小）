#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <arpa/inet.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <unistd.h>
#include <errno.h>
#include <time.h>
#include <errno.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>

#define BUFFER_SIZE 1024 // 定义缓冲区大小



// 获取可用的源端口
int get_free_port()
{
    int sockfd;
    struct sockaddr_in addr;
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0)
    {
        perror("创建套接字失败");
        return -1;
    }
    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(0);
    // 绑定到端口0以获取一个可用端口
    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        perror("绑定失败");
        close(sockfd);
        return -1;
    }
    socklen_t addr_len = sizeof(addr);
    if (getsockname(sockfd, (struct sockaddr *)&addr, &addr_len) < 0)
    {
        perror("获取端口失败");
        close(sockfd);
        return -1;
    }
    int port = ntohs(addr.sin_port);
    close(sockfd);
    return port;// 返回获取到的可用端口
    
}
// 获取可用的源端口



// 定义一个结构体来传递多个参数
typedef struct
{
    char *line;
    int port;
} thread_args_t;
// 定义一个结构体来传递多个参数





// 监听线程函数
void *listen_function(void *arg)
{
    thread_args_t *args = (thread_args_t *)arg;
    int port = args->port;
    // 创建原始套接字
    int listen_sock = socket(AF_INET, SOCK_RAW, IPPROTO_TCP);
    if (listen_sock < 0)
    {
        perror("创建原始套接字失败");
        return NULL;
    }
    char buffer[BUFFER_SIZE];
    int packet_count = 0;
    int total_size = 0;
    // 设置接收超时为 5 秒
    struct timeval timeout;
    timeout.tv_sec = 5;
    // 秒
    timeout.tv_usec = 0;
    // 微秒
    setsockopt(listen_sock, SOL_SOCKET, SO_RCVTIMEO, (const char *)&timeout, sizeof(timeout));
    while (1)
    {
        ssize_t bytes_received = recv(listen_sock, buffer, sizeof(buffer), 0);
        if (bytes_received < 0)
        {
            break;
        }
        // 将接收到的数据转换为 IP 头部
        struct iphdr *ip_header = (struct iphdr *)buffer;
        // 来源端口和目标端口
        if (ip_header->protocol == IPPROTO_TCP)
        {
            // TCP 头部开始的位置
            struct tcphdr *tcp_header = (struct tcphdr *)(buffer + (ip_header->ihl * 4));
            // 检查目标端口
            if (ntohs(tcp_header->dest) == port)
            {
                total_size += bytes_received;
                packet_count++;
            }
            
            
            
            
            
            
            
            
            
            
            
        }
    }
    printf("dst_ip: %s，src_port: %d，数据包 %d 个，总大小为 %d 字节\n", args->line, args->port, packet_count, total_size);
    close(listen_sock);
    return NULL;
}
// 监听线程函数




// 校验和计算函数
unsigned short checksum(unsigned short *b, int len)
{
    unsigned short *p = b;
    unsigned int sum = 0;
    unsigned short answer = 0;
    // 计算校验和
    for (sum = 0; len > 1; len -= 2)
    {
        sum += *p++;
    }
    if (len == 1)
    {
        sum += *(unsigned char *)p;
    }
    sum = (sum >> 16) + (sum & 0xFFFF);
    sum += (sum >> 16);
    answer = ~sum;
    return answer;
}
// 校验和计算函数





// 创建原始套接字并发送数据包
int create_socket(char *src_ip, int src_port, char *dst_ip)
{
    int sockfd;
    struct sockaddr_in dest, recv_addr;
    struct iphdr iph;
    struct tcphdr tcph;
    char packet[4096];
    char buffer[4096];
    // 创建套接字
    sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if (sockfd < 0)
    {
        printf("套接字创建失败 %s\n", dst_ip);
        return -1;
        // 失败返回
    }
    // 填充 IP 头部
    memset(&iph, 0, sizeof(iph));
    iph.ihl = 5;
    iph.version = 4;
    iph.tos = 0;
    iph.tot_len = sizeof(iph) + sizeof(tcph) + strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n");
    iph.id = htons(12345);
    iph.frag_off = 0;
    iph.ttl = 255;
    iph.protocol = IPPROTO_TCP;
    iph.check = 0;
    iph.saddr = inet_addr(src_ip);
    iph.daddr = inet_addr(dst_ip);
    // 计算 IP 校验和
    iph.check = checksum((unsigned short *)&iph, sizeof(iph));
    // 填充 TCP 头部
    memset(&tcph, 0, sizeof(tcph));
    tcph.source = htons(src_port);
    tcph.dest = htons(80);
    tcph.seq = htonl(rand() % (UINT32_MAX - 100000) + 100000);
    tcph.ack_seq = htonl(5000);
    tcph.doff = 5;
    tcph.fin = 0;
    tcph.syn = 0;
    tcph.rst = 0;
    tcph.psh = 1;
    tcph.ack = 1;
    tcph.urg = 1;
    tcph.urg_ptr = htons(10);
    tcph.window = htons(65535);
    tcph.check = 0;
    // 填充伪头部
    struct pseudo_header
    {
        u_int32_t source_address;
        u_int32_t dest_address;
        u_int8_t placeholder;
        u_int8_t protocol;
        u_int16_t tcp_length;
    } psh;
    memset(&psh, 0, sizeof(psh));
    psh.source_address = inet_addr(src_ip);
    psh.dest_address = inet_addr(dst_ip);
    psh.placeholder = 0;
    psh.protocol = IPPROTO_TCP;
    psh.tcp_length = htons(sizeof(tcph) + strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n"));
    // 计算 TCP 校验和
    int psize = sizeof(psh) + sizeof(tcph) + strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n");
    char *pseudogram = malloc(psize);
    memcpy(pseudogram, (char *)&psh, sizeof(psh));
    memcpy(pseudogram + sizeof(psh), &tcph, sizeof(tcph));
    memcpy(pseudogram + sizeof(psh) + sizeof(tcph), "GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n", strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n"));
    // 计算校验和并赋值给 TCP 头部
    tcph.check = checksum((unsigned short *)pseudogram, psize);
    free(pseudogram);
    // 释放内存
    // 创建数据包
    memset(packet, 0, 4096);
    memcpy(packet, &iph, sizeof(iph));
    memcpy(packet + sizeof(iph), &tcph, sizeof(tcph));
    memcpy(packet + sizeof(iph) + sizeof(tcph), "GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n", strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n"));
    // 设置目标地址
    dest.sin_family = AF_INET;
    dest.sin_port = htons(80);
    dest.sin_addr.s_addr = iph.daddr;
    // 发送数据包
    if (sendto(sockfd, packet, iph.tot_len, 0, (struct sockaddr *)&dest, sizeof(dest)) < 0)
    {
        // printf("发送失败 %s\n", dst_ip);
    }
    else
    {
        // printf("发送成功 %s\n", dst_ip);
    }
    close(sockfd);
    // 关闭发送套接字
}
// 发送线程函数
void *send_function(void *arg)
{
    thread_args_t *args = (thread_args_t *)arg;
    // printf("发送线程启动，发送行: %s，端口: %d\n", args->line, args->port);
    create_socket("192.168.1.27", args->port, args->line);
    return NULL;
}
// 线程函数
void *thread_function(void *arg)
{
    char *line = (char *)arg;
    int port = get_free_port();
    thread_args_t *args = malloc(sizeof(thread_args_t));
    args->line = strdup(line);
    args->port = port;
    // 创建监听线程
    pthread_t listen_thread;
    if (pthread_create(&listen_thread, NULL, listen_function, (void *)args) != 0)
    {
        perror("创建监听线程失败");
        free(args->line);
        free(args);
        return NULL;
    }
    sleep(1);
    // 创建发送线程
    pthread_t send_thread;
    if (pthread_create(&send_thread, NULL, send_function, (void *)args) != 0)
    {
        perror("创建发送线程失败");
        free(args->line);
        free(args);
        return NULL;
    }
    // 等待监听和发送线程结束
    pthread_join(listen_thread, NULL);
    // pthread_join(send_thread, NULL);
    return NULL;
}
// 主函数
int main(int argc, char *argv[])
{
    // 检查参数数量
    if (argc != 3)
    {
        fprintf(stderr, "用法: %s <反射文件> <线程数量>\n", argv[0]);
        return 1;
        // 返回1表示错误
    }
    // 获取参数
    char *target_file = argv[1];
    // 反射文件
    int THREAD_COUNT = atoi(argv[2]);
    // 从命令行参数中获取线程数量
    // 检查线程数量是否合法
    if (THREAD_COUNT <= 0)
    {
        fprintf(stderr, "错误: 线程数量必须是正整数。\n");
        return 1;
        // 返回1表示错误
    }
    // 打开目标文件
    FILE *file = fopen(target_file, "r");
    if (!file)
    {
        perror("文件打开失败");
        return 1;
    }
    char line[256];
    // 用于存储读取的行
    pthread_t threads[THREAD_COUNT];
    // 存储线程ID
    int thread_index = 0;
    // 读取文件并启动线程
    while (fgets(line, sizeof(line), file))
    {
        // 去除行末的换行符
        line[strcspn(line, "\n")] = '\0';
        // 创建新线程
        if (pthread_create(&threads[thread_index], NULL, thread_function, (void *)strdup(line)) != 0)
        {
            perror("线程创建失败");
            return 1;
        }
        // 处理线程数量限制
        thread_index++;
        if (thread_index >= THREAD_COUNT)
        {
            for (int i = 0; i < THREAD_COUNT; i++)
            {
                pthread_join(threads[i], NULL);
                // 等待线程结束
            }
            thread_index = 0;
            // 重置线程索引
        }
    }
    // 等待所有剩余线程结束
    for (int i = 0; i < thread_index; i++)
    {
        pthread_join(threads[i], NULL);
    }
    // 关闭文件
    fclose(file);
    return 0;
    // 成功返回
}
