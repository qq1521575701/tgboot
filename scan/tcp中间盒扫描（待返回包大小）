#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <time.h>
#include <pthread.h>
#include <errno.h>
#include <fcntl.h>
#include <string.h>

#define BUFFER_SIZE 65536
int line_count = 0; // 记录行数
struct thread_data {
    char time_str[20];
    char dst_ip[16];
    int src_port;
};


// 声明全局线程变量
pthread_t writer_thread, reader_thread;

FILE *output_file;
pthread_mutex_t file_mutex; // 声明全局互斥锁
int listen_sock;

// 手动解析时间字符串
time_t parse_time(const char* time_str) {
    struct tm tm_time = {0};
    sscanf(time_str, "%d-%d-%d %d:%d:%d", 
           &tm_time.tm_year, &tm_time.tm_mon, &tm_time.tm_mday, 
           &tm_time.tm_hour, &tm_time.tm_min, &tm_time.tm_sec);
    
    // 调整年份和月份
    tm_time.tm_year -= 1900; // 年份从1900开始
    tm_time.tm_mon -= 1;     // 月份从0开始
    
    return mktime(&tm_time);
}

void* read_function(void* arg) {
    struct thread_data *data = (struct thread_data *)arg;

    // 睡眠 5 秒
    sleep(5);

    pthread_mutex_lock(&file_mutex);

    FILE *file_to_modify = fopen("output.txt", "r");
    if (file_to_modify) {
        char line[256];
        int count = 0;
        char port_str[10]; // 用于存储端口的字符串表示

        snprintf(port_str, sizeof(port_str), "%d", data->src_port); // 转换端口为字符串
        
        time_t current_time = time(NULL); // 获取当前时间

        while (fgets(line, sizeof(line), file_to_modify) != NULL) {
            char time_str[20];
            struct tm tm_time;

            char *start = strchr(line, '[');
            char *end = strchr(line, ']');
            
            // 如果找到时间，并且有效
            if (start && end && end > start) {
                size_t len = end - start - 1; // 计算时间字符串的长度
                strncpy(time_str, start + 1, len);
                time_str[len] = '\0'; // 添加字符串结束符
                
                // 将提取的时间字符串转换为时间戳
                time_t line_time = parse_time(time_str);
                // 比较行中是否包含目标字符串
                if (strstr(line, port_str) != NULL && difftime(current_time, line_time) > -6000) {
                //printf("current_time: %ld\n", (long)current_time);
                //printf("line_time: %ld\n", (long)line_time);
                
                    count++;
                }
            }
        }

        printf("ip: %s 源端口: %s 返回包个数: %d\n", data->dst_ip, port_str, count);
        
        fclose(file_to_modify);
    } else {
        perror("打开文件以读取失败");
    }
    
    pthread_mutex_unlock(&file_mutex);
    free(data); // 释放分配的内存
    return NULL; // 线程结束
}




// 获取可用的源端口
int get_free_port()
{
    int sockfd;
    struct sockaddr_in addr;
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0)
    {
        perror("创建套接字失败");
        return -1;
    }
    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = INADDR_ANY;
    addr.sin_port = htons(0);
    // 绑定到端口0以获取一个可用端口
    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        perror("绑定失败");
        close(sockfd);
        return -1;
    }
    socklen_t addr_len = sizeof(addr);
    if (getsockname(sockfd, (struct sockaddr *)&addr, &addr_len) < 0)
    {
        perror("获取端口失败");
        close(sockfd);
        return -1;
    }
    int port = ntohs(addr.sin_port);
    close(sockfd);
    return port;// 返回获取到的可用端口
    
}


// 校验和计算函数
unsigned short checksum(unsigned short *b, int len)
{
    unsigned short *p = b;
    unsigned int sum = 0;
    unsigned short answer = 0;
    // 计算校验和
    for (sum = 0; len > 1; len -= 2)
    {
        sum += *p++;
    }
    if (len == 1)
    {
        sum += *(unsigned char *)p;
    }
    sum = (sum >> 16) + (sum & 0xFFFF);
    sum += (sum >> 16);
    answer = ~sum;
    return answer;
}
// 校验和计算函数





// 创建原始套接字并发送数据包
int create_socket(char *src_ip, int src_port, char *dst_ip)
{
    int sockfd;
    struct sockaddr_in dest, recv_addr;
    struct iphdr iph;
    struct tcphdr tcph;
    char packet[4096];
    char buffer[4096];
    // 创建套接字
    sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if (sockfd < 0)
    {
        printf("套接字创建失败 %s\n", dst_ip);
        return -1;
        // 失败返回
    }
    // 填充 IP 头部
    memset(&iph, 0, sizeof(iph));
    iph.ihl = 5;
    iph.version = 4;
    iph.tos = 0;
    iph.tot_len = sizeof(iph) + sizeof(tcph) + strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n");
    iph.id = htons(12345);
    iph.frag_off = 0;
    iph.ttl = 255;
    iph.protocol = IPPROTO_TCP;
    iph.check = 0;
    iph.saddr = inet_addr(src_ip);
    iph.daddr = inet_addr(dst_ip);
    // 计算 IP 校验和
    iph.check = checksum((unsigned short *)&iph, sizeof(iph));
    // 填充 TCP 头部
    memset(&tcph, 0, sizeof(tcph));
    tcph.source = htons(src_port);
    tcph.dest = htons(80);
    tcph.seq = htonl(rand() % (UINT32_MAX - 100000) + 100000);
    tcph.ack_seq = htonl(5000);
    tcph.doff = 5;
    tcph.fin = 0;
    tcph.syn = 0;
    tcph.rst = 0;
    tcph.psh = 1;
    tcph.ack = 1;
    tcph.urg = 1;
    tcph.urg_ptr = htons(10);
    tcph.window = htons(65535);
    tcph.check = 0;
    // 填充伪头部
    struct pseudo_header
    {
        u_int32_t source_address;
        u_int32_t dest_address;
        u_int8_t placeholder;
        u_int8_t protocol;
        u_int16_t tcp_length;
    } psh;
    memset(&psh, 0, sizeof(psh));
    psh.source_address = inet_addr(src_ip);
    psh.dest_address = inet_addr(dst_ip);
    psh.placeholder = 0;
    psh.protocol = IPPROTO_TCP;
    psh.tcp_length = htons(sizeof(tcph) + strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n"));
    // 计算 TCP 校验和
    int psize = sizeof(psh) + sizeof(tcph) + strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n");
    char *pseudogram = malloc(psize);
    memcpy(pseudogram, (char *)&psh, sizeof(psh));
    memcpy(pseudogram + sizeof(psh), &tcph, sizeof(tcph));
    memcpy(pseudogram + sizeof(psh) + sizeof(tcph), "GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n", strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n"));
    // 计算校验和并赋值给 TCP 头部
    tcph.check = checksum((unsigned short *)pseudogram, psize);
    free(pseudogram);
    // 释放内存
    // 创建数据包
    memset(packet, 0, 4096);
    memcpy(packet, &iph, sizeof(iph));
    memcpy(packet + sizeof(iph), &tcph, sizeof(tcph));
    memcpy(packet + sizeof(iph) + sizeof(tcph), "GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n", strlen("GET /index.php?id=1 and 1=1 HTTP/1.1\r\nHost: freedomhouse.org\r\n\r\n"));
    // 设置目标地址
    dest.sin_family = AF_INET;
    dest.sin_port = htons(80);
    dest.sin_addr.s_addr = iph.daddr;
    // 发送数据包
    if (sendto(sockfd, packet, iph.tot_len, 0, (struct sockaddr *)&dest, sizeof(dest)) < 0)
    {
        //printf("发送失败 %s\n", dst_ip);
    }
    else
    {
        time_t current_time = time(NULL);
        struct tm *local_time = localtime(&current_time);
        char time_str[20];
        strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", local_time);
//printf("[%s] Source IP: %s, Destination Port: %d\n", time_str, dst_ip, src_port);

struct thread_data *data = malloc(sizeof(struct thread_data));
if (!data) {
    perror("无法分配内存");
    exit(EXIT_FAILURE);
}

strncpy(data->time_str, time_str, sizeof(data->time_str));
strncpy(data->dst_ip, dst_ip, sizeof(data->dst_ip));
data->src_port = src_port;

// 创建读取线程
int result = pthread_create(&reader_thread, NULL, read_function, (void*)data);
if (result) {
    fprintf(stderr, "创建线程失败: %d\n", result);
    free(data); // 释放已分配的内存
    exit(EXIT_FAILURE);
}


    

        
        
    }
    close(sockfd);
    // 关闭发送套接字
}

void* packet_receiver(void* arg) {
    struct sockaddr_in addr;
    char buffer[BUFFER_SIZE];
    int addr_len = sizeof(addr);

    while (1) {
        ssize_t data_size = recvfrom(listen_sock, buffer, sizeof(buffer), 0, (struct sockaddr*)&addr, (socklen_t*)&addr_len);
        if (data_size < 0) {
            perror("Recvfrom failed");
            continue;
        }

        struct iphdr *ip_header = (struct iphdr *)buffer;
        struct tcphdr *tcp_header = (struct tcphdr *)(buffer + ip_header->ihl * 4);
        struct in_addr src_ip;
        src_ip.s_addr = ip_header->saddr;

        // 获取当前时间
        time_t current_time = time(NULL);
        char time_str[20];
        strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&current_time));

        // 锁定文件
        pthread_mutex_lock(&file_mutex);
        fprintf(output_file,"[%s] Source IP: %s, Destination Port: %u, Size: %zd bytes\n", 
               time_str, inet_ntoa(src_ip), ntohs(tcp_header->dest), data_size);
        fflush(output_file);
        
        
        line_count++; // 每次写入后增加行数
        if (line_count > 20000) { // 如果行数超过20000
            freopen("output.txt", "w", output_file); // 清空文件
            line_count = 0; // 重置行数计数器
        }

        pthread_mutex_unlock(&file_mutex);
        
        
        
    }
    return NULL;
}






int main(int argc, char *argv[]) {  
    // 检查命令行参数数量  
    if (argc != 4) {  
        fprintf(stderr, "用法: %s <反射文件> <延迟> <源ip>\n", argv[0]);  
        return 1;  
    }  

    // 打开输出文件，确保是新文件
    output_file = fopen("output.txt", "w");
    if (output_file == NULL) {
        perror("文件打开失败");
        return 1; // 直接返回
    }

    // 初始化文件锁
    pthread_mutex_init(&file_mutex, NULL);

    // 创建原始套接字
    listen_sock = socket(AF_INET, SOCK_RAW, IPPROTO_TCP);
    if (listen_sock < 0) {
        perror("Socket creation failed");
        fclose(output_file);
        return 1;
    }

    pthread_t receiver_thread;
    // 创建接收数据包的线程
    if (pthread_create(&receiver_thread, NULL, packet_receiver, NULL) != 0) {
        perror("Thread creation failed");
        close(listen_sock);
        fclose(output_file);
        return 1;
    }

    // 声明并初始化变量  
    char *target_file = argv[1]; // 文件路径  
    int delay = atoi(argv[2]); // 延迟  
    char *src_ip = argv[3]; // 源IP地址  

    char line_buffer[256]; // 用于存储文件行的缓冲区  

    // 打开目标文件  
    FILE *file = fopen(target_file, "r");  
    if (!file) {  
        perror("文件打开失败");  
        fclose(output_file); // 关闭输出文件
        return 1;  
    }  
    
    int i;

    // 处理文件内容  
    while (fgets(line_buffer, sizeof(line_buffer), file) != NULL) {  
        line_buffer[strcspn(line_buffer, "\r\n")] = '\0'; // 去除行末的换行符  
        int src_port = get_free_port();
        create_socket(src_ip, src_port, line_buffer);
        usleep(delay * 1000);
    }  
    

    


    fclose(file); // 关闭文件  
    sleep(30);
    fclose(output_file); // 关闭输出文件
    pthread_cancel(receiver_thread); // 取消接收线程
    
    close(listen_sock);
    return 0;
}


